(ns io.prismic.api
  (:require-macros
    [adzerk.env :as env]))

(env/def
  PRISMIC_URL :required)

(defc  ref-url     PRISMIC_URL)
(defc= search-url  (str ref-url "/documents/search"))

(def query (fn [cell data & [url]]
              (let [url       (or url @search-url)]
                (.getJSON
                  js/jQuery
                  url
                  data
                  #(let [r (js->clj %1 :keywordize-keys true)] (reset! cell r))))))

(defn get-channels [cell ref uids & [url]]
  (let [uidlist (when uids (clojure.string/join "\" , \"" uids))
        q1      "[:d = any(document.tags, [\"channel\"])]"
        q2      (when uidlist (str "[:d = any(my.container.uid, [\"" uidlist "\"])]"))
        q       (str "[" q1 q2 "]")
        data    (clj->js {:q q :ref ref})]
    (query cell data url)))

(defn get-logo [cell ref & [url]]
  (let [q       "[[:d = at(document.type, \"logo\")]]"
        data    (clj->js {:q q :ref ref})]
    (query cell data url)))

(defn get-all-containers [cell ref & [url]]
  (let [q       "[[:d = at(document.type, \"container\")]]"
        data    (clj->js {:q q :ref ref})]
    (query cell data url)))

(defn get-all-authors [cell ref & [url]]
  (let [q       "[[:d = at(document.type, \"author\")]]"
        data    (clj->js {:q q :ref ref})]
    (query cell data url)))

(defn get-articles-by-container-id [cell ref id & [url]]
; (spy->> "[container]" id)
  (let [q     (str "[[:d = at(my.article.contained_in.container, \"" id "\")]]")
        data  (clj->js {:q q :ref ref})]
    (query cell data url)))

(defn get-containers [cell ref ids & [url]]
  (let [idlist  (clojure.string/join "\" , \"" ids)
        q       (str "[[:d = any(document.id, [\"" idlist "\"])]]")
        data    (clj->js {:q q :ref ref})]
    (query cell data url)))

(defn get-container [cell ref id & [url]]
  (let [q       (str "[[:d = at(document.id, \"" id "\")]]")
        data    (clj->js {:q q :ref ref})]
    (query cell data url)))

(defn get-nav [cell ref & [url]]
  (let [q       "[:d = at(document.type, \"nav\")]"
        q       (str "[" q "]")
        data    (clj->js {:ref ref :q q})]
    (query cell data url)))

(defn get-network [cell ref & [url]]
  (let [q       "[[:d = at(document.type, \"network\")]]"
        data    (clj->js {:ref ref :q q})]
    (query cell data url)))

(defn get-refs [cell & [url]]
  (let [url     (or url @ref-url)]
    (.getJSON
      js/jQuery
      url
      #(let [r (js->clj %1 :keywordize-keys true)]
        (reset! cell r)))))
